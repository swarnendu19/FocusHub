name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CACHE_KEY: node-modules

jobs:
  # Quality checks and testing
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run linting
        working-directory: frontend
        run: npm run lint
        
      - name: Run type checking
        working-directory: frontend
        run: npm run type-check
        
      - name: Run unit tests
        working-directory: frontend
        run: npm run test:unit
        
      - name: Run integration tests
        working-directory: frontend
        run: npm run test:integration
        
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend
          
  # Build verification
  build:
    name: Build & Verify
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        environment: [staging, production]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Build application
        working-directory: frontend
        run: npm run build:prod
        env:
          NODE_ENV: ${{ matrix.environment }}
          VITE_API_BASE_URL: ${{ secrets.API_BASE_URL }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          VITE_ENABLE_ANALYTICS: ${{ secrets.ENABLE_ANALYTICS }}
          VITE_ENABLE_AI_FEATURES: ${{ secrets.ENABLE_AI_FEATURES }}
          VITE_ENABLE_COLLABORATION: ${{ secrets.ENABLE_COLLABORATION }}
          VITE_ENABLE_INTEGRATIONS: ${{ secrets.ENABLE_INTEGRATIONS }}
          VITE_ENABLE_PERFORMANCE_MONITORING: ${{ secrets.ENABLE_PERFORMANCE_MONITORING }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          VITE_GA_TRACKING_ID: ${{ secrets.GA_TRACKING_ID }}
          VITE_HOTJAR_ID: ${{ secrets.HOTJAR_ID }}
          VITE_PWA_ENABLED: true
          VITE_GIT_COMMIT: ${{ github.sha }}
          
      - name: Verify build
        working-directory: frontend
        run: npm run verify-build
        
      - name: Generate bundle analysis
        working-directory: frontend
        run: npm run build:analyze
        if: matrix.environment == 'production'
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.environment }}
          path: frontend/dist/
          retention-days: 7
          
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis-${{ matrix.environment }}
          path: frontend/dist/stats.html
          retention-days: 30
        if: matrix.environment == 'production'

  # End-to-end testing
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-staging
          path: frontend/dist/
          
      - name: Start preview server
        working-directory: frontend
        run: npm run preview &
        
      - name: Wait for server
        run: npx wait-on http://localhost:4173
        
      - name: Run E2E tests
        working-directory: frontend
        run: npm run test:e2e
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: frontend/test-results/
          retention-days: 7

  # Performance testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: frontend/dist/
          
      - name: Run Lighthouse CI
        working-directory: frontend
        run: npm run test:lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Run performance tests
        working-directory: frontend
        run: npm run test:performance

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run security audit
        working-directory: frontend
        run: npm audit --audit-level=moderate
        
      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'gamified-time-tracker-frontend'
          path: 'frontend'
          format: 'HTML'
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: reports/
          retention-days: 30

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-staging
          path: frontend/dist/
          
      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: frontend
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: staging.yourdomain.com

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e, performance, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: frontend/dist/
          
      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: frontend
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            ${{ github.event.head_commit.message }}
            
            ## Deployment
            - ✅ Production build verified
            - ✅ E2E tests passed
            - ✅ Performance tests passed
            - ✅ Security scan completed
            - 🚀 Deployed to production
            
            ## Artifacts
            - Bundle analysis available in workflow artifacts
            - Performance metrics tracked
          draft: false
          prerelease: false

  # Post-deployment verification
  post-deploy:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Health check
        run: |
          curl -f https://yourdomain.com/health || exit 1
          
      - name: Smoke tests
        working-directory: frontend
        run: npm run test:smoke
        env:
          BASE_URL: https://yourdomain.com
          
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()
        
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()