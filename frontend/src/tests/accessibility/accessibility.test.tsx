import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { axe, toHaveNoViolations } from 'jest-axe';
import { AccessibleButton } from '@/components/ui/accessible-button';
import { ResponsiveNavigation } from '@/components/layout/ResponsiveNavigation';
import { ResponsiveLayout } from '@/components/layout/ResponsiveLayout';
import { BrowserRouter } from 'react-router-dom';

// Extend Jest matchers
expect.extend(toHaveNoViolations);

// Mock framer-motion to avoid animation issues in tests
vi.mock('framer-motion', () => ({
    motion: {
        div: ({ children, ...props }: any) => <div {...props}>{children}</div>,
        nav: ({ children, ...props }: any) => <nav {...props}>{children}</nav>,
    },
    AnimatePresence: ({ children }: any) => children,
}));

// Mock responsive hooks
vi.mock('@/utils/responsive', () => ({
    useDeviceType: () => 'desktop',
    useBreakpoint: () => true,
    useSafeArea: () => ({ top: 0, right: 0, bottom: 0, left: 0 }),
}));

// Mock accessibility hooks
vi.mock('@/utils/accessibility', () => ({
    useReducedMotion: () => false,
    FocusManager: {
        trapFocus: vi.fn(() => vi.fn()),
        pushFocus: vi.fn(),
        popFocus: vi.fn(),
    },
    handleKeyboardNavigation: vi.fn(),
    announceToScreenReader: vi.fn(),
}));

describe('Accessibility Tests', () => {
    beforeEach(() => {
        // Reset all mocks
        vi.clearAllMocks();
    }); \n\n  describe('AccessibleButton', () => { \n    it('should have no accessibility violations', async () => { \n      const { container } = render(\n < AccessibleButton > Click me</AccessibleButton >\n); \n      \n      const results = await axe(container); \n      expect(results).toHaveNoViolations(); \n }); \n\n    it('should have proper ARIA attributes', () => { \n      render(\n < AccessibleButton\n          ariaLabel =\"Custom button label\"\n          ariaDescribedBy=\"description-id\"\n          ariaExpanded={true}\n          ariaPressed={false}\n        >\n          Button\n        </AccessibleButton>\n      );\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveAttribute('aria-label', 'Custom button label');\n      expect(button).toHaveAttribute('aria-describedby', 'description-id');\n      expect(button).toHaveAttribute('aria-expanded', 'true');\n      expect(button).toHaveAttribute('aria-pressed', 'false');\n    });\n\n    it('should handle keyboard navigation', async () => {\n      const user = userEvent.setup();\n      const onEnterPress = vi.fn();\n      const onSpacePress = vi.fn();\n      \n      render(\n        <AccessibleButton\n          onEnterPress={onEnterPress}\n          onSpacePress={onSpacePress}\n        >\n          Button\n        </AccessibleButton>\n      );\n      \n      const button = screen.getByRole('button');\n      \n      // Focus the button\n      button.focus();\n      expect(button).toHaveFocus();\n      \n      // Test Enter key\n      await user.keyboard('{Enter}');\n      \n      // Test Space key\n      await user.keyboard(' ');\n    });\n\n    it('should show loading state with proper ARIA attributes', () => {\n      render(\n        <AccessibleButton loading={true} loadingText=\"Processing...\">\n          Submit\n        </AccessibleButton>\n      );\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveAttribute('aria-busy', 'true');\n      expect(button).toBeDisabled();\n      expect(screen.getByText('Processing...')).toBeInTheDocument();\n    });\n\n    it('should announce success feedback to screen readers', async () => {\n      const { announceToScreenReader } = await import('@/utils/accessibility');\n      \n      render(\n        <AccessibleButton\n          showSuccessFeedback={true}\n          successMessage=\"Action completed successfully\"\n        >\n          Save\n        </AccessibleButton>\n      );\n      \n      const button = screen.getByRole('button');\n      fireEvent.click(button);\n      \n      expect(announceToScreenReader).toHaveBeenCalledWith('Action completed successfully');\n    });\n\n    it('should have proper focus styles', () => {\n      render(<AccessibleButton>Focus me</AccessibleButton>);\n      \n      const button = screen.getByRole('button');\n      expect(button).toHaveClass('focus:outline-none', 'focus:ring-2', 'focus:ring-offset-2', 'focus:ring-blue-500');\n    });\n  });\n\n  describe('ResponsiveNavigation', () => {\n    const renderWithRouter = (component: React.ReactElement) => {\n      return render(\n        <BrowserRouter>\n          {component}\n        </BrowserRouter>\n      );\n    };\n\n    it('should have no accessibility violations', async () => {\n      const { container } = renderWithRouter(<ResponsiveNavigation />);\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it('should have proper navigation landmarks', () => {\n      renderWithRouter(<ResponsiveNavigation />);\n      \n      const nav = screen.getByRole('navigation', { name: 'Main navigation' });\n      expect(nav).toBeInTheDocument();\n    });\n\n    it('should have proper link attributes', () => {\n      renderWithRouter(<ResponsiveNavigation />);\n      \n      const dashboardLink = screen.getByRole('link', { name: /dashboard/i });\n      expect(dashboardLink).toHaveAttribute('href', '/');\n      expect(dashboardLink).toHaveAttribute('aria-describedby');\n    });\n\n    it('should indicate current page with aria-current', () => {\n      // Mock location to be on dashboard\n      vi.mock('react-router-dom', async () => {\n        const actual = await vi.importActual('react-router-dom');\n        return {\n          ...actual,\n          useLocation: () => ({ pathname: '/' }),\n        };\n      });\n      \n      renderWithRouter(<ResponsiveNavigation />);\n      \n      const dashboardLink = screen.getByRole('link', { name: /dashboard/i });\n      expect(dashboardLink).toHaveAttribute('aria-current', 'page');\n    });\n\n    it('should have proper focus management for mobile menu', async () => {\n      const user = userEvent.setup();\n      \n      // Mock mobile device\n      vi.mocked(await import('@/utils/responsive')).useBreakpoint.mockReturnValue(false);\n      \n      renderWithRouter(<ResponsiveNavigation />);\n      \n      const menuButton = screen.getByRole('button', { name: /open navigation menu/i });\n      expect(menuButton).toHaveAttribute('aria-expanded', 'false');\n      expect(menuButton).toHaveAttribute('aria-haspopup', 'true');\n      \n      // Open menu\n      await user.click(menuButton);\n      \n      expect(menuButton).toHaveAttribute('aria-expanded', 'true');\n      \n      // Check for mobile menu dialog\n      const mobileMenu = screen.getByRole('dialog');\n      expect(mobileMenu).toHaveAttribute('aria-modal', 'true');\n    });\n  });\n\n  describe('ResponsiveLayout', () => {\n    it('should have no accessibility violations', async () => {\n      const { container } = render(\n        <BrowserRouter>\n          <ResponsiveLayout>\n            <div>Content</div>\n          </ResponsiveLayout>\n        </BrowserRouter>\n      );\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    it('should have skip link for keyboard navigation', () => {\n      render(\n        <BrowserRouter>\n          <ResponsiveLayout>\n            <div>Content</div>\n          </ResponsiveLayout>\n        </BrowserRouter>\n      );\n      \n      const skipLink = screen.getByRole('link', { name: /skip to main content/i });\n      expect(skipLink).toHaveAttribute('href', '#main-content');\n    });\n\n    it('should have proper main landmark', () => {\n      render(\n        <BrowserRouter>\n          <ResponsiveLayout>\n            <div>Content</div>\n          </ResponsiveLayout>\n        </BrowserRouter>\n      );\n      \n      const main = screen.getByRole('main');\n      expect(main).toHaveAttribute('id', 'main-content');\n      expect(main).toHaveAttribute('aria-label', 'Main content');\n    });\n\n    it('should handle reduced motion preferences', () => {\n      // Mock reduced motion preference\n      vi.mocked(await import('@/utils/accessibility')).useReducedMotion.mockReturnValue(true);\n      \n      render(\n        <BrowserRouter>\n          <ResponsiveLayout>\n            <div>Content</div>\n          </ResponsiveLayout>\n        </BrowserRouter>\n      );\n      \n      // The component should render without animations\n      // This is tested through the motion variants having duration: 0.01\n      expect(screen.getByRole('main')).toBeInTheDocument();\n    });\n  });\n\n  describe('Keyboard Navigation', () => {\n    it('should handle Tab navigation properly', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <div>\n          <AccessibleButton>First</AccessibleButton>\n          <AccessibleButton>Second</AccessibleButton>\n          <AccessibleButton>Third</AccessibleButton>\n        </div>\n      );\n      \n      const buttons = screen.getAllByRole('button');\n      \n      // Tab through buttons\n      await user.tab();\n      expect(buttons[0]).toHaveFocus();\n      \n      await user.tab();\n      expect(buttons[1]).toHaveFocus();\n      \n      await user.tab();\n      expect(buttons[2]).toHaveFocus();\n      \n      // Shift+Tab to go backwards\n      await user.tab({ shift: true });\n      expect(buttons[1]).toHaveFocus();\n    });\n\n    it('should handle Escape key to close modals', async () => {\n      const user = userEvent.setup();\n      const onClose = vi.fn();\n      \n      render(\n        <div onKeyDown={(e) => e.key === 'Escape' && onClose()}>\n          <AccessibleButton>Button</AccessibleButton>\n        </div>\n      );\n      \n      await user.keyboard('{Escape}');\n      expect(onClose).toHaveBeenCalled();\n    });\n  });\n\n  describe('Screen Reader Support', () => {\n    it('should have proper heading hierarchy', () => {\n      render(\n        <div>\n          <h1>Main Title</h1>\n          <h2>Section Title</h2>\n          <h3>Subsection Title</h3>\n        </div>\n      );\n      \n      expect(screen.getByRole('heading', { level: 1 })).toBeInTheDocument();\n      expect(screen.getByRole('heading', { level: 2 })).toBeInTheDocument();\n      expect(screen.getByRole('heading', { level: 3 })).toBeInTheDocument();\n    });\n\n    it('should have descriptive link text', () => {\n      render(\n        <BrowserRouter>\n          <a href=\"/projects\">View all projects</a>\n        </BrowserRouter>\n      );\n      \n      const link = screen.getByRole('link');\n      expect(link).toHaveAccessibleName('View all projects');\n    });\n\n    it('should have proper form labels', () => {\n      render(\n        <form>\n          <label htmlFor=\"email\">Email Address</label>\n          <input id=\"email\" type=\"email\" />\n        </form>\n      );\n      \n      const input = screen.getByRole('textbox');\n      expect(input).toHaveAccessibleName('Email Address');\n    });\n  });\n\n  describe('Color Contrast', () => {\n    it('should have sufficient color contrast for text', () => {\n      render(\n        <div className=\"text-gray-900 bg-white\">\n          High contrast text\n        </div>\n      );\n      \n      // This would need actual color contrast testing\n      // For now, we just ensure the element renders\n      expect(screen.getByText('High contrast text')).toBeInTheDocument();\n    });\n  });\n});