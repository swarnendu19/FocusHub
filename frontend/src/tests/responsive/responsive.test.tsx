import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import { render, screen, act } from '@testing-library/react';
import { renderHook } from '@testing-library/react';
import {
    useScreenSize,
    useDeviceType,
    useBreakpoint,
    useBreakpoints,
    useResponsiveValue,
    useIsTouchDevice,
    useOrientation,
} from '@/utils/responsive';
import { ResponsiveGrid, ResponsiveContainer, ResponsiveText } from '@/components/layout/ResponsiveLayout';

// Mock window object
const mockWindow = {
    innerWidth: 1024,
    innerHeight: 768,
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
    matchMedia: vi.fn(),
}; \n\nObject.defineProperty(window, 'innerWidth', { \n  writable: true, \n  configurable: true, \n  value: 1024, \n }); \n\nObject.defineProperty(window, 'innerHeight', { \n  writable: true, \n  configurable: true, \n  value: 768, \n }); \n\n// Mock ResizeObserver\nglobal.ResizeObserver = vi.fn().mockImplementation(() => ({\n  observe: vi.fn(),\n  unobserve: vi.fn(),\n  disconnect: vi.fn(),\n}));\n\ndescribe('Responsive Utilities', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n    \n    // Reset window dimensions\n    Object.defineProperty(window, 'innerWidth', { value: 1024, writable: true });\n    Object.defineProperty(window, 'innerHeight', { value: 768, writable: true });\n    \n    // Mock addEventListener and removeEventListener\n    window.addEventListener = vi.fn();\n    window.removeEventListener = vi.fn();\n  });\n\n  describe('useScreenSize', () => {\n    it('should return current screen dimensions', () => {\n      const { result } = renderHook(() => useScreenSize());\n      \n      expect(result.current.width).toBe(1024);\n      expect(result.current.height).toBe(768);\n    });\n\n    it('should update dimensions on window resize', () => {\n      const { result } = renderHook(() => useScreenSize());\n      \n      // Verify event listener was added\n      expect(window.addEventListener).toHaveBeenCalledWith('resize', expect.any(Function));\n      \n      // Simulate window resize\n      act(() => {\n        Object.defineProperty(window, 'innerWidth', { value: 768, writable: true });\n        Object.defineProperty(window, 'innerHeight', { value: 1024, writable: true });\n        \n        // Get the resize handler and call it\n        const resizeHandler = (window.addEventListener as any).mock.calls.find(\n          (call: any) => call[0] === 'resize'\n        )[1];\n        resizeHandler();\n      });\n      \n      expect(result.current.width).toBe(768);\n      expect(result.current.height).toBe(1024);\n    });\n\n    it('should clean up event listener on unmount', () => {\n      const { unmount } = renderHook(() => useScreenSize());\n      \n      unmount();\n      \n      expect(window.removeEventListener).toHaveBeenCalledWith('resize', expect.any(Function));\n    });\n  });\n\n  describe('useDeviceType', () => {\n    it('should return mobile for small screens', () => {\n      Object.defineProperty(window, 'innerWidth', { value: 640, writable: true });\n      \n      const { result } = renderHook(() => useDeviceType());\n      expect(result.current).toBe('mobile');\n    });\n\n    it('should return tablet for medium screens', () => {\n      Object.defineProperty(window, 'innerWidth', { value: 800, writable: true });\n      \n      const { result } = renderHook(() => useDeviceType());\n      expect(result.current).toBe('tablet');\n    });\n\n    it('should return desktop for large screens', () => {\n      Object.defineProperty(window, 'innerWidth', { value: 1200, writable: true });\n      \n      const { result } = renderHook(() => useDeviceType());\n      expect(result.current).toBe('desktop');\n    });\n  });\n\n  describe('useBreakpoint', () => {\n    it('should return true when screen is larger than breakpoint', () => {\n      Object.defineProperty(window, 'innerWidth', { value: 1024, writable: true });\n      \n      const { result } = renderHook(() => useBreakpoint('md'));\n      expect(result.current).toBe(true);\n    });\n\n    it('should return false when screen is smaller than breakpoint', () => {\n      Object.defineProperty(window, 'innerWidth', { value: 640, writable: true });\n      \n      const { result } = renderHook(() => useBreakpoint('lg'));\n      expect(result.current).toBe(false);\n    });\n  });\n\n  describe('useBreakpoints', () => {\n    it('should return correct breakpoint flags', () => {\n      Object.defineProperty(window, 'innerWidth', { value: 1024, writable: true });\n      \n      const { result } = renderHook(() => useBreakpoints());\n      \n      expect(result.current.isSm).toBe(true);\n      expect(result.current.isMd).toBe(true);\n      expect(result.current.isLg).toBe(true);\n      expect(result.current.isXl).toBe(false);\n      expect(result.current.current).toBe('lg');\n    });\n  });\n\n  describe('useResponsiveValue', () => {\n    it('should return appropriate value for current breakpoint', () => {\n      Object.defineProperty(window, 'innerWidth', { value: 1024, writable: true });\n      \n      const { result } = renderHook(() =>\n        useResponsiveValue({\n          base: 'small',\n          md: 'medium',\n          lg: 'large',\n          xl: 'extra-large',\n        })\n      );\n      \n      expect(result.current).toBe('large');\n    });\n\n    it('should fallback to base value when no breakpoint matches', () => {\n      Object.defineProperty(window, 'innerWidth', { value: 400, writable: true });\n      \n      const { result } = renderHook(() =>\n        useResponsiveValue({\n          base: 'small',\n          lg: 'large',\n        })\n      );\n      \n      expect(result.current).toBe('small');\n    });\n  });\n\n  describe('useIsTouchDevice', () => {\n    it('should detect touch devices', () => {\n      // Mock touch support\n      Object.defineProperty(window, 'ontouchstart', { value: true, writable: true });\n      \n      const { result } = renderHook(() => useIsTouchDevice());\n      expect(result.current).toBe(true);\n    });\n\n    it('should detect non-touch devices', () => {\n      // Remove touch support\n      delete (window as any).ontouchstart;\n      Object.defineProperty(navigator, 'maxTouchPoints', { value: 0, writable: true });\n      \n      const { result } = renderHook(() => useIsTouchDevice());\n      expect(result.current).toBe(false);\n    });\n  });\n\n  describe('useOrientation', () => {\n    it('should return landscape for wide screens', () => {\n      Object.defineProperty(window, 'innerWidth', { value: 1024, writable: true });\n      Object.defineProperty(window, 'innerHeight', { value: 768, writable: true });\n      \n      const { result } = renderHook(() => useOrientation());\n      expect(result.current).toBe('landscape');\n    });\n\n    it('should return portrait for tall screens', () => {\n      Object.defineProperty(window, 'innerWidth', { value: 768, writable: true });\n      Object.defineProperty(window, 'innerHeight', { value: 1024, writable: true });\n      \n      const { result } = renderHook(() => useOrientation());\n      expect(result.current).toBe('portrait');\n    });\n  });\n});\n\ndescribe('Responsive Components', () => {\n  // Mock the responsive hooks for component tests\n  beforeEach(() => {\n    vi.mock('@/utils/responsive', () => ({\n      useDeviceType: () => 'desktop',\n      useBreakpoint: () => true,\n      useSafeArea: () => ({ top: 0, right: 0, bottom: 0, left: 0 }),\n    }));\n  });\n\n  describe('ResponsiveGrid', () => {\n    it('should render with correct grid columns', () => {\n      render(\n        <ResponsiveGrid\n          columns={{ mobile: 1, tablet: 2, desktop: 3 }}\n          data-testid=\"responsive-grid\"\n        >\n          <div>Item 1</div>\n          <div>Item 2</div>\n          <div>Item 3</div>\n        </ResponsiveGrid>\n      );\n      \n      const grid = screen.getByTestId('responsive-grid');\n      expect(grid).toHaveClass('grid');\n      expect(grid).toHaveStyle({ gridTemplateColumns: 'repeat(3, minmax(0, 1fr))' });\n    });\n\n    it('should apply correct gap classes', () => {\n      render(\n        <ResponsiveGrid gap=\"lg\" data-testid=\"responsive-grid\">\n          <div>Item</div>\n        </ResponsiveGrid>\n      );\n      \n      const grid = screen.getByTestId('responsive-grid');\n      expect(grid).toHaveClass('gap-6');\n    });\n  });\n\n  describe('ResponsiveContainer', () => {\n    it('should render with correct max width', () => {\n      render(\n        <ResponsiveContainer size=\"lg\" data-testid=\"container\">\n          <div>Content</div>\n        </ResponsiveContainer>\n      );\n      \n      const container = screen.getByTestId('container');\n      expect(container).toHaveClass('max-w-4xl');\n    });\n\n    it('should center content when center prop is true', () => {\n      render(\n        <ResponsiveContainer center={true} data-testid=\"container\">\n          <div>Content</div>\n        </ResponsiveContainer>\n      );\n      \n      const container = screen.getByTestId('container');\n      expect(container).toHaveClass('mx-auto');\n    });\n\n    it('should apply responsive padding', () => {\n      render(\n        <ResponsiveContainer data-testid=\"container\">\n          <div>Content</div>\n        </ResponsiveContainer>\n      );\n      \n      const container = screen.getByTestId('container');\n      expect(container).toHaveClass('px-4', 'sm:px-6', 'lg:px-8');\n    });\n  });\n\n  describe('ResponsiveText', () => {\n    it('should apply responsive text sizes', () => {\n      render(\n        <ResponsiveText\n          size={{\n            mobile: 'text-sm',\n            tablet: 'text-base',\n            desktop: 'text-lg',\n          }}\n          data-testid=\"responsive-text\"\n        >\n          Responsive text\n        </ResponsiveText>\n      );\n      \n      const text = screen.getByTestId('responsive-text');\n      expect(text).toHaveClass('text-sm', 'sm:text-base', 'lg:text-lg');\n    });\n\n    it('should apply correct font weight', () => {\n      render(\n        <ResponsiveText weight=\"bold\" data-testid=\"responsive-text\">\n          Bold text\n        </ResponsiveText>\n      );\n      \n      const text = screen.getByTestId('responsive-text');\n      expect(text).toHaveClass('font-bold');\n    });\n\n    it('should apply correct color', () => {\n      render(\n        <ResponsiveText color=\"muted\" data-testid=\"responsive-text\">\n          Muted text\n        </ResponsiveText>\n      );\n      \n      const text = screen.getByTestId('responsive-text');\n      expect(text).toHaveClass('text-gray-500', 'dark:text-gray-400');\n    });\n  });\n});\n\ndescribe('Responsive Behavior Integration', () => {\n  it('should adapt layout based on screen size changes', () => {\n    // This would test the integration of responsive utilities\n    // with actual component behavior\n    \n    const TestComponent = () => {\n      const deviceType = useDeviceType();\n      return <div data-testid=\"device-type\">{deviceType}</div>;\n    };\n    \n    render(<TestComponent />);\n    \n    // Initial render should show desktop\n    expect(screen.getByTestId('device-type')).toHaveTextContent('desktop');\n    \n    // Simulate screen size change to mobile\n    act(() => {\n      Object.defineProperty(window, 'innerWidth', { value: 400, writable: true });\n      \n      // Trigger resize event\n      const resizeEvent = new Event('resize');\n      window.dispatchEvent(resizeEvent);\n    });\n    \n    // Should now show mobile (this would need proper hook re-rendering)\n    // In a real test, you'd need to handle the async state update\n  });\n\n  it('should handle orientation changes', () => {\n    const TestComponent = () => {\n      const orientation = useOrientation();\n      return <div data-testid=\"orientation\">{orientation}</div>;\n    };\n    \n    render(<TestComponent />);\n    \n    // Should initially be landscape (1024x768)\n    expect(screen.getByTestId('orientation')).toHaveTextContent('landscape');\n  });\n\n  it('should provide consistent breakpoint behavior', () => {\n    const TestComponent = () => {\n      const isLarge = useBreakpoint('lg');\n      return (\n        <div data-testid=\"breakpoint-test\">\n          {isLarge ? 'Large screen' : 'Small screen'}\n        </div>\n      );\n    };\n    \n    render(<TestComponent />);\n    \n    // With 1024px width, should be large screen\n    expect(screen.getByTestId('breakpoint-test')).toHaveTextContent('Large screen');\n  });\n});